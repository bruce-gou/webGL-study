
http://www.hewebgl.com/article/getarticle/68
1.纹理由图片组成
	在threejs中，纹理类由THREE.Texture表示，其构造函数如下所示：

	THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy )

    各个参数的意义是：
	Image：这是一个图片类型，基本上它有ImageUtils来加载, 如下代码:
	    // url 是一个http://xxxx/aaa.jpg 的类似地址，javascript没有从本地加载数据的能力，
	    // 所以没有办法从您电脑的C盘加载数据。
	    var image = THREE.ImageUtils.loadTexture(url);

	Mapping：是一个THREE.UVMapping()类型，它表示的是纹理坐标

	wrapS：表示x轴的纹理的回环方式，就是当纹理的宽度小于需要贴图的平面的宽度的时候，平面剩下的部分应该p以何种方式贴图的问题。

	wrapT：表示y轴的纹理回环方式。 magFilter和minFilter表示过滤的方式，这是OpenGL的基本概念，我将在下面讲一下，目前你不用担心它的使用。当您不设置的时候，它会取默认值，所以，我们这里暂时不理睬他。

	format：表示加载的图片的格式，这个参数可以取值THREE.RGBAFormat，RGBFormat等。			THREE.RGBAFormat表示每个像素点要使用四个分量表示，分别是红、绿、蓝、透明来表示。RGBFormat则不使用	透明，也就是说纹理不会有透明的效果。

	type：表示存储纹理的内存的每一个字节的格式，是有符号，还是没有符号，是整形，还是浮点型。不过这里默认是无符号型（THREE.UnsignedByteType）。暂时就解释到这里，有需要时，我们在仔细分析，或者给作者留言询	问。

	anisotropy：各向异性过滤。使用各向异性过滤能够使纹理的效果更好，但是会消耗更多的内存、CPU、GPU时间，暂时就了解到这里吧。

2.纹理坐标
	
	在正常的情况下，你在0.0到1.0的范围内指定纹理坐标。

	左上角：(0，1)
	左下角：(0，0)
	右上角：(1，1)
	右下角：(1，0)

3.实例
    3.1画一个平面
	通过PlaneGemotry可以画一个平面，代码如下：
	
	PlaneGeometry(width : Float, height : Float, widthSegments : Integer, heightSegments : Integer)
	width — 平面沿着X轴的宽度。默认值是1。
	height — 平面沿着Y轴的高度。默认值是1。
	widthSegments — （可选）平面的宽度分段数，默认值是1。
	heightSegments — （可选）平面的高度分段数，默认值是1。

	var geometry = new THREE.PlaneGeometry( 500, 300, 1, 1 );
	这个平面的宽度是500，高度是300.

    3.2为平面赋予纹理坐标
	平面有4个顶点，所以我们只需要指定4个纹理坐标就行了。纹理坐标由顶点的uv成员来表示，uv被定义为一个二维向量THREE.Vector2()，我们可以通过如下代码来为平面定义纹理：

	geometry.vertices[0].uv = new THREE.Vector2(0,0);
	geometry.vertices[1].uv = new THREE.Vector2(1,0);
	geometry.vertices[2].uv = new THREE.Vector2(1,1);
	geometry.vertices[3].uv = new THREE.Vector2(0,1);

    3.3加载纹理
	这里加载纹理使用了上面介绍的loadTexture函数
	var texture = new THREE.TextureLoader().load("textures/a.jpg");
	
	这个函数的第一个参数是一个相对路径，表示与您的网页之间的相对路径。相对路径对应了一个纹理图片textures/a.jpg。

	最后，这个函数的返回值是加载的纹理。

    3.4将纹理应用于材质
	加载好纹理，万事俱备了，只需要将纹理映射到材质就可以了。我们这里使用了一个普通的材质THREE.MeshBasicMaterial，材质中有一个map属性，可以直接接受纹理，我们可以这样定义一个带纹理的材质：
	
	    var material = new THREE.MeshBasicMaterial({map:texture});

	ok，接下来的事情就简单了，直接将纹理甩给Mesh，同时也别忘了Mesh也需要geometry，他们暧昧的关系如下：

	    var mesh = new THREE.Mesh( geometry,material );
	最后的最后，将这个mesh加入场景中：
	
	    scene.add( mesh );

	
	最终需要循环渲染才能加载出来


